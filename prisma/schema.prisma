datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model User {
  id            String    @id @default(cuid())
  dateNaissance DateTime? @map("date_naissance")
  name          String?
  surname       String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  adresse       String?
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]
  gains         Gain[]
  Adresse       Adresse?

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Adresse {
  id      Int     @id @default(autoincrement())
  cp      Int?
  libelle String?
  numero  String?
  pays    String?

  userId      String @unique @map("user_id")
  userAdresse User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("adresses")
}

model TicketsRestants {
  id              Int @id @default(autoincrement())
  ticketsRestants Int

  @@map("ticketsrestants")
}

model Gain {
  id          Int       @id @default(autoincrement())
  codeCadeau  String    @unique @map("code_cadeau") @db.Text
  dateRetrait DateTime? @map("date_retrait")
  userId      String?   @unique @map("user_id")
  produitId   Int?

  Produit Produit? @relation(fields: [produitId], references: [id])
  refUser User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("gains")
}

model Produit {
  id         Int      @id @default(autoincrement())
  actif      Boolean?
  nomProduit String?  @map("nom_produit")
  prixTtc    Decimal? @map("prix_ttc")
  refGain    Gain[]

  @@map("produits")
}

enum Role {
  USER
  ADMIN
  SUPERADMIN
}
